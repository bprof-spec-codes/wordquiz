// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordQuiz.Data;

#nullable disable

namespace WordQuiz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230528105007_20230528")]
    partial class _20230528
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Description = "Learn how to address your or your partner's family at gatherings.",
                            Title = "Family"
                        },
                        new
                        {
                            Id = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Description = "These words will help you cheer for your favorite team.",
                            Title = "Sports"
                        },
                        new
                        {
                            Id = "930a39f6-5f49-4e70-925f-d5cfb986616b",
                            Description = "Become an Oxford level green-thumb with this vocabulary.",
                            Title = "Gardening"
                        },
                        new
                        {
                            Id = "ecf340dd-8c1e-4537-bb15-e0f79a323252",
                            Description = "Words related to traveling abroad.",
                            Title = "Travel"
                        },
                        new
                        {
                            Id = "2a0e8a42-15c1-4ff1-86bd-713977dd927d",
                            Description = "Everything you need to know regarding fashion or about simply going shopping for clothes.",
                            Title = "Clothing"
                        },
                        new
                        {
                            Id = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Description = "A vocabulary aimed to help you avoid embarrassment while going out to eat.",
                            Title = "Food"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = "49af2d3d-a921-4d3a-a3b4-bcb63aa403a7",
                            Original = "Father",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Apa"
                        },
                        new
                        {
                            Id = "cf04ac15-46a9-4ecd-b4e0-ccdbc3937651",
                            Original = "Mother",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Anya"
                        },
                        new
                        {
                            Id = "21c86026-f37d-43b5-bc1e-b437b32c6e14",
                            Original = "Aunt",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Nagynéni"
                        },
                        new
                        {
                            Id = "0aa32f96-d418-4a14-8852-d4c8b892e029",
                            Original = "Uncle",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Nagybácsi"
                        },
                        new
                        {
                            Id = "aa868458-5165-4708-ade6-2c8a34a0c867",
                            Original = "Grandmother",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Nagymama"
                        },
                        new
                        {
                            Id = "0c40796d-c469-4ff1-a8e1-6069ab0791f1",
                            Original = "Grandfather",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Nagypapa"
                        },
                        new
                        {
                            Id = "2dd8da26-4c4e-4ec9-b566-d34aea952328",
                            Original = "Grandfather",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Nagyapa"
                        },
                        new
                        {
                            Id = "90b4e8a8-603e-4316-914e-7ec52d72b463",
                            Original = "Mother-in-law",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Anyós"
                        },
                        new
                        {
                            Id = "6b906fef-b602-4168-a1ac-4cae74f50363",
                            Original = "Father-in-law",
                            TopicId = "9a8636be-cf28-4956-b2d4-5febb0c65766",
                            Translation = "Após"
                        },
                        new
                        {
                            Id = "bd218318-17bb-4a74-9e9d-fbe341ce2f59",
                            Original = "Team",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Csapat"
                        },
                        new
                        {
                            Id = "d415768b-6d06-49f8-91f6-b252880753ab",
                            Original = "Opponent",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Ellenfél"
                        },
                        new
                        {
                            Id = "67fcae3b-1131-4b3d-a973-65d6ed355bd3",
                            Original = "Stadium",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Stadion"
                        },
                        new
                        {
                            Id = "797dbb0c-d15a-4c37-9254-91181d406e87",
                            Original = "Running",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Futás"
                        },
                        new
                        {
                            Id = "8f52c11f-f299-4f9b-8fe0-f06c63deabed",
                            Original = "Finish",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Cél"
                        },
                        new
                        {
                            Id = "a7962a19-ed19-4904-b331-3916fc67b178",
                            Original = "Swimming",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Úszás"
                        },
                        new
                        {
                            Id = "b9a5b082-0338-4365-b28f-9ed2ccb0d6b9",
                            Original = "Rope",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Kötél"
                        },
                        new
                        {
                            Id = "39f1a884-c5a8-4c35-ae0d-1af53317c23e",
                            Original = "Coach",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Edző"
                        },
                        new
                        {
                            Id = "9cc43b61-f755-4e8b-b102-c2589cf524d1",
                            Original = "Final",
                            TopicId = "301e3814-6756-45a1-8593-059e387c0ee9",
                            Translation = "Döntő"
                        },
                        new
                        {
                            Id = "27a298b8-6bc2-460a-b89d-27b7bbd46728",
                            Original = "Lemon",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Citrom"
                        },
                        new
                        {
                            Id = "cf4b40f2-4ac9-4fbd-a0f6-86699cafc67b",
                            Original = "Peach",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Barack"
                        },
                        new
                        {
                            Id = "6d28a45d-40f0-4cad-92b6-da02b9cf7889",
                            Original = "Bean",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Bab"
                        },
                        new
                        {
                            Id = "a84ce285-ddb2-47e1-b1a3-5a9bb48e46e9",
                            Original = "Pea",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Borsó"
                        },
                        new
                        {
                            Id = "51a979fb-aed1-435a-86b1-8b1afb6bd10a",
                            Original = "Broccoli",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Brokkoli"
                        },
                        new
                        {
                            Id = "713b1bb3-ca29-4d85-9fac-33fe02484a4b",
                            Original = "Corn",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Kukorica"
                        },
                        new
                        {
                            Id = "db19bbc6-4206-4b7f-85a1-35b86c75d9d0",
                            Original = "Rice",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Rizs"
                        },
                        new
                        {
                            Id = "7200e70a-420b-4897-8c2f-e43404a81eb4",
                            Original = "Mushroom",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Gomba"
                        },
                        new
                        {
                            Id = "63942b08-799c-4ffa-abeb-6075255dfdab",
                            Original = "Carrot",
                            TopicId = "a3ca0ece-3fa0-4978-ba80-0e6a0033ab17",
                            Translation = "Répa"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("WordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WordId");

                    b.ToTable("WordStatistics");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new
                        {
                            Id = "6f755a44-4e17-4bfc-9379-87b9156e46c3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06b48572-c4cd-4d90-aaf4-2cd15f45ee23",
                            Email = "seedplayer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SEEDPLAYER@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEP75QjLG6iQT73FraYXQNNKPYNbxNNWMX80doXgeg60zuXNSFhs2MRCNMEuFrxpSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd6336cd-0bf5-40bc-a008-47b4be6a06a6",
                            TwoFactorEnabled = false,
                            UserName = "seedplayer@gmail.com",
                            PlayerName = "SeedPlayer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.HasOne("WordQuiz.Models.Topic", "Topic")
                        .WithMany("Words")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.HasOne("WordQuiz.Models.Player", "Player")
                        .WithMany("WordStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordQuiz.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.Navigation("WordStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
