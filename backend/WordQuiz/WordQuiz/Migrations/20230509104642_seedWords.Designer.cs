// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordQuiz.Data;

#nullable disable

namespace WordQuiz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230509104642_seedWords")]
    partial class seedWords
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Description = "Learn how to address your or your partner's family at gatherings.",
                            Title = "Family"
                        },
                        new
                        {
                            Id = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Description = "These words will help you cheer for your favorite team.",
                            Title = "Sports"
                        },
                        new
                        {
                            Id = "6f6b38ac-da17-467a-a890-0181abb08965",
                            Description = "Become an Oxford level green-thumb with this vocabulary.",
                            Title = "Gardening"
                        },
                        new
                        {
                            Id = "9749a65a-200d-47fc-9402-bdf3955440b5",
                            Description = "Words related to traveling abroad.",
                            Title = "Travel"
                        },
                        new
                        {
                            Id = "bc508cd2-0db1-4c78-8d08-adfcd201ff51",
                            Description = "Everything you need to know regarding fashion or about simply going shopping for clothes.",
                            Title = "Clothing"
                        },
                        new
                        {
                            Id = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Description = "A vocabulary aimed to help you avoid embarrassment while going out to eat.",
                            Title = "Food"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = "dc6ced7b-7749-46e1-899d-e725c79a2ece",
                            Original = "Father",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Apa"
                        },
                        new
                        {
                            Id = "a7cb3c50-71a0-42cd-9838-def0a47b10d3",
                            Original = "Mother",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Anya"
                        },
                        new
                        {
                            Id = "fe938b14-1a96-434e-9edb-26e617768ebf",
                            Original = "Aunt",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Nagynéni"
                        },
                        new
                        {
                            Id = "3f31de49-5c4e-4f24-8b99-21387a856dff",
                            Original = "Uncle",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Nagybácsi"
                        },
                        new
                        {
                            Id = "5153d2e3-0c9a-4b2e-91eb-ed1abffcc24a",
                            Original = "Grandmother",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Nagymama"
                        },
                        new
                        {
                            Id = "9818f431-91ce-48ef-9fed-0878a59f4de2",
                            Original = "Grandfather",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Nagypapa"
                        },
                        new
                        {
                            Id = "5c444e98-58e9-4438-a589-08bccf34149e",
                            Original = "Grandfather",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Nagyapa"
                        },
                        new
                        {
                            Id = "479a54d0-4cf4-4c76-8551-006a1e485af4",
                            Original = "Mother-in-law",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Anyós"
                        },
                        new
                        {
                            Id = "4851bcd0-498c-4bff-871f-d324ab41b7e4",
                            Original = "Father-in-law",
                            TopicId = "cfe64dcb-e9a9-471c-a0f4-c97110d900a9",
                            Translation = "Após"
                        },
                        new
                        {
                            Id = "14238d69-bcdc-4f2c-9eee-8a02214cceba",
                            Original = "Team",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Csapat"
                        },
                        new
                        {
                            Id = "608b552d-5134-4bcb-94f6-b2c7dacab8a7",
                            Original = "Opponent",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Ellenfél"
                        },
                        new
                        {
                            Id = "c0a10236-ffdf-44dd-b752-cc5c0a0b36bb",
                            Original = "Stadium",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Stadion"
                        },
                        new
                        {
                            Id = "beb4c76c-d9fa-4207-9601-29bbc2f86852",
                            Original = "Running",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Futás"
                        },
                        new
                        {
                            Id = "9d8227d3-b049-420c-9377-a264fe2c3764",
                            Original = "Finish",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Cél"
                        },
                        new
                        {
                            Id = "4a1c36f9-e9a0-4d1c-8dd0-f727b67446d4",
                            Original = "Swimming",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Úszás"
                        },
                        new
                        {
                            Id = "9757a31a-f635-4e51-b86c-d67a021b3a62",
                            Original = "Rope",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Kötél"
                        },
                        new
                        {
                            Id = "90ec983e-2c5f-4d22-8c39-3aa44ccc71a0",
                            Original = "Coach",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Edző"
                        },
                        new
                        {
                            Id = "dc20d280-f009-4b27-b052-24cf33e175c9",
                            Original = "Final",
                            TopicId = "e4f8cb9d-d365-4cc5-80e4-9a3a003e8234",
                            Translation = "Döntő"
                        },
                        new
                        {
                            Id = "d1af9757-f0b3-4d3c-b8bd-0e8c07677076",
                            Original = "Lemon",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Citrom"
                        },
                        new
                        {
                            Id = "3b5d99bc-b9b6-4f3e-a64b-4f33f3fae42f",
                            Original = "Peach",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Barack"
                        },
                        new
                        {
                            Id = "d3806da7-8498-47af-bd6c-2f4461305fef",
                            Original = "Bean",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Bab"
                        },
                        new
                        {
                            Id = "a843dc55-b8af-4c4c-a1c6-8e23e546bb88",
                            Original = "Pea",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Borsó"
                        },
                        new
                        {
                            Id = "75a166f5-2952-4201-b4bc-3ee66d3c39a7",
                            Original = "Broccoli",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Brokkoli"
                        },
                        new
                        {
                            Id = "30bdc2b3-aa79-4fad-8ed4-f0b44b454fd0",
                            Original = "Corn",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Kukorica"
                        },
                        new
                        {
                            Id = "cac94c6b-4dbc-40a4-b700-69c2cebcd85e",
                            Original = "Rice",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Rizs"
                        },
                        new
                        {
                            Id = "6a6f011c-6667-4488-aa58-647c6d810fd5",
                            Original = "Mushroom",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Gomba"
                        },
                        new
                        {
                            Id = "68ff04fc-ff73-42ad-ac6d-8c1664338b17",
                            Original = "Carrot",
                            TopicId = "5257a489-8112-47a3-a34d-767d665c25c2",
                            Translation = "Répa"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("WordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WordId");

                    b.ToTable("WordStatistics");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new
                        {
                            Id = "e05685b5-6e69-4747-a282-d6c4a35f26a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34da1b7-ec61-4e6d-9cde-4ffeebfadba9",
                            Email = "seedplayer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SEEDPLAYER@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEAsipOlfrSQEpimSfKVXMmkLnrgEjO4nbK2JlRMyzuAS9gjARM/xKgWV2vlHMZQzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64e70670-d2ec-4456-bdcd-8fd467a77ad6",
                            TwoFactorEnabled = false,
                            UserName = "seedplayer@gmail.com",
                            PlayerName = "SeedPlayer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.HasOne("WordQuiz.Models.Topic", "Topic")
                        .WithMany("Words")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.HasOne("WordQuiz.Models.Player", "Player")
                        .WithMany("WordStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordQuiz.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.Navigation("WordStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
