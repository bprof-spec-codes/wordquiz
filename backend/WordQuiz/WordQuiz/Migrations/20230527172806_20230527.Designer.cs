// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordQuiz.Data;

#nullable disable

namespace WordQuiz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230527172806_20230527")]
    partial class _20230527
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Description = "Learn how to address your or your partner's family at gatherings.",
                            Title = "Family"
                        },
                        new
                        {
                            Id = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Description = "These words will help you cheer for your favorite team.",
                            Title = "Sports"
                        },
                        new
                        {
                            Id = "e138d205-06d5-447c-9c9d-8b7d5023c139",
                            Description = "Become an Oxford level green-thumb with this vocabulary.",
                            Title = "Gardening"
                        },
                        new
                        {
                            Id = "5dd7c2f6-9261-431f-968f-bf072f0909df",
                            Description = "Words related to traveling abroad.",
                            Title = "Travel"
                        },
                        new
                        {
                            Id = "5fce3c94-b8d0-4c9f-ab33-429db46996bf",
                            Description = "Everything you need to know regarding fashion or about simply going shopping for clothes.",
                            Title = "Clothing"
                        },
                        new
                        {
                            Id = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Description = "A vocabulary aimed to help you avoid embarrassment while going out to eat.",
                            Title = "Food"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = "a08b38f8-04e6-4204-a34d-410c2e8a2920",
                            Original = "Father",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Apa"
                        },
                        new
                        {
                            Id = "372ca771-69fb-4f69-a0dd-c04b1140aca5",
                            Original = "Mother",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Anya"
                        },
                        new
                        {
                            Id = "6754b19a-3024-4288-be4e-1a9a882e025f",
                            Original = "Aunt",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Nagynéni"
                        },
                        new
                        {
                            Id = "7eed3cb8-d3a9-48f4-a1cd-3dcc08e55d59",
                            Original = "Uncle",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Nagybácsi"
                        },
                        new
                        {
                            Id = "ce12bdd7-bbd0-42f4-982f-945cfa7a171d",
                            Original = "Grandmother",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Nagymama"
                        },
                        new
                        {
                            Id = "c2d79916-4192-4c25-ad02-18d8aa598bf7",
                            Original = "Grandfather",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Nagypapa"
                        },
                        new
                        {
                            Id = "e1ce0a94-b71f-49dc-9d42-84abff5ba21a",
                            Original = "Grandfather",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Nagyapa"
                        },
                        new
                        {
                            Id = "5d01043c-ec9c-4856-89ac-c20a6ddb575c",
                            Original = "Mother-in-law",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Anyós"
                        },
                        new
                        {
                            Id = "65eca4d3-3b1d-47d9-80bb-3fbbc230b508",
                            Original = "Father-in-law",
                            TopicId = "160d157c-cbc2-4380-bfb9-6a6a47bf6989",
                            Translation = "Após"
                        },
                        new
                        {
                            Id = "faafdb4a-c206-4668-9fe6-8b187cb8de00",
                            Original = "Team",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Csapat"
                        },
                        new
                        {
                            Id = "0310397b-853d-4d68-a56a-8e1cb4660e52",
                            Original = "Opponent",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Ellenfél"
                        },
                        new
                        {
                            Id = "455ef039-62d2-4482-af97-305f2cf96a36",
                            Original = "Stadium",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Stadion"
                        },
                        new
                        {
                            Id = "1ed56a1a-0d41-4d16-92bd-e1cad2159545",
                            Original = "Running",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Futás"
                        },
                        new
                        {
                            Id = "0221bc9e-17fb-4293-8efb-1599ea9a2c80",
                            Original = "Finish",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Cél"
                        },
                        new
                        {
                            Id = "0ed80c94-0e50-4187-9457-9741771ad58c",
                            Original = "Swimming",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Úszás"
                        },
                        new
                        {
                            Id = "2d5cd120-4432-4ec2-8ca5-d0c679d83dbc",
                            Original = "Rope",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Kötél"
                        },
                        new
                        {
                            Id = "d524e424-bd81-4dbd-b31e-6c7bbc12faca",
                            Original = "Coach",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Edző"
                        },
                        new
                        {
                            Id = "a1d23303-e174-412c-b501-9a3428fd474a",
                            Original = "Final",
                            TopicId = "e8b7b57e-a2fb-4c03-a3a2-1031898f59ce",
                            Translation = "Döntő"
                        },
                        new
                        {
                            Id = "8294b229-d800-47c2-91f9-95b8e8ee1bd1",
                            Original = "Lemon",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Citrom"
                        },
                        new
                        {
                            Id = "d42e1925-c0c8-41a3-a1f9-951c8a76d027",
                            Original = "Peach",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Barack"
                        },
                        new
                        {
                            Id = "ea14b086-3b0e-4f0e-af7e-777916516b30",
                            Original = "Bean",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Bab"
                        },
                        new
                        {
                            Id = "30766bd1-1892-4be7-bd58-65ad057b8cf3",
                            Original = "Pea",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Borsó"
                        },
                        new
                        {
                            Id = "cc0c9de4-d1df-4609-8b51-0e6319ae4767",
                            Original = "Broccoli",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Brokkoli"
                        },
                        new
                        {
                            Id = "bd1cefce-4d46-4cd0-86c9-7333fa591fef",
                            Original = "Corn",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Kukorica"
                        },
                        new
                        {
                            Id = "d0f665ff-d052-4235-925b-06ef7f273f06",
                            Original = "Rice",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Rizs"
                        },
                        new
                        {
                            Id = "4cfed6e5-fc15-472c-b82c-1574b071f6f1",
                            Original = "Mushroom",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Gomba"
                        },
                        new
                        {
                            Id = "750cd415-f6b7-4492-b024-283e337f797f",
                            Original = "Carrot",
                            TopicId = "113c7ee1-802f-4855-a2d0-55cffe943c0b",
                            Translation = "Répa"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CorrectGuesses")
                        .HasColumnType("int");

                    b.Property<int>("IncorrectGuesses")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("WordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WordId");

                    b.ToTable("WordStatistics");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new
                        {
                            Id = "4e3c2278-833f-4c36-9567-ba6db126c4f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93fe5985-3ae3-4aaa-a745-46919e8a1407",
                            Email = "seedplayer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SEEDPLAYER@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJliqkLzVYiFtEMF7nanI/ArKDuwBK9BGcP7xBOCUjI2pPiDv56/IjsM2oaWT2mrTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22943c27-0011-4484-8724-57fcf929a83b",
                            TwoFactorEnabled = false,
                            UserName = "seedplayer@gmail.com",
                            PlayerName = "SeedPlayer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.HasOne("WordQuiz.Models.Topic", "Topic")
                        .WithMany("Words")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.HasOne("WordQuiz.Models.Player", "Player")
                        .WithMany("WordStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordQuiz.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.Navigation("WordStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
