// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordQuiz.Data;

#nullable disable

namespace WordQuiz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230327114030_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Description = "Learn how to address your or your partner's family at gatherings.",
                            Title = "Family"
                        },
                        new
                        {
                            Id = "9dd65c01-6126-4af1-8a74-a775a30991ba",
                            Description = "These words will help you cheer for your favorite team.",
                            Title = "Sports"
                        },
                        new
                        {
                            Id = "4cfe0f00-1809-41c8-89f4-88f1643d9e5e",
                            Description = "Become an Oxford level green-thumb with this vocabulary.",
                            Title = "Gardening"
                        },
                        new
                        {
                            Id = "502ebbe2-e45c-42b3-95f5-8b3d380ff15b",
                            Description = "Words related to traveling abroad.",
                            Title = "Travel"
                        },
                        new
                        {
                            Id = "263323b5-4a07-470d-a70f-bcfa9bc31a52",
                            Description = "Everything you need to know regarding fashion or about simply going shopping for clothes.",
                            Title = "Clothing"
                        },
                        new
                        {
                            Id = "f22a21a2-1500-49ca-91dd-e5920fee812b",
                            Description = "A vocabulary aimed to help you avoid embarrassment while going out to eat.",
                            Title = "Food"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Original")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = "5dbea794-8d23-422c-b7cb-82fb7fcb3a0c",
                            Original = "Father",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Apa"
                        },
                        new
                        {
                            Id = "636cd12c-15e2-4b17-a96b-a1dabbd950ad",
                            Original = "Mother",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Anya"
                        },
                        new
                        {
                            Id = "6eac9ea4-f47e-4fd4-8925-d95a951de3df",
                            Original = "Aunt",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Nagynéni"
                        },
                        new
                        {
                            Id = "8c58a2ce-c035-4e3d-83e4-fa4e7ff3d331",
                            Original = "Uncle",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Nagybácsi"
                        },
                        new
                        {
                            Id = "c3afa9ac-065f-415e-81d2-f0800e291bb3",
                            Original = "Grandmother",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Nagymama"
                        },
                        new
                        {
                            Id = "b7d86a56-5ae7-4204-9735-0e605c1d1b28",
                            Original = "Grandfather",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Nagypapa"
                        },
                        new
                        {
                            Id = "f3dd361f-6f2a-4e8e-9fbc-300435cc44ca",
                            Original = "Grandfather",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Nagyapa"
                        },
                        new
                        {
                            Id = "2f726723-73da-4713-8cc2-f8bcc0cb0cd4",
                            Original = "Mother-in-law",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Anyós"
                        },
                        new
                        {
                            Id = "753aaea6-7696-48ad-854e-9161c4610b66",
                            Original = "Father-in-law",
                            TopicId = "36beb080-cc92-49a1-b695-982bd6d6fced",
                            Translation = "Após"
                        });
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("WordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("WordId");

                    b.ToTable("WordStatistics");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Player");

                    b.HasData(
                        new
                        {
                            Id = "a5bcff92-c0bc-4eca-8155-af2e96520a60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a10f5ca0-fcd9-4272-8ea0-5f9d932e1e89",
                            Email = "seedplayer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SEEDPLAYER@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEI2bRoKvO0V95+rmhvkyCIbvOVOZIzdaAAL/j1pNi9djW2/j87vN28h9IAj3yg1oXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52f5bfc3-c7ec-41b1-9527-be246a471a69",
                            TwoFactorEnabled = false,
                            UserName = "seedplayer@gmail.com",
                            PlayerName = "SeedPlayer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WordQuiz.Models.Word", b =>
                {
                    b.HasOne("WordQuiz.Models.Topic", "Topic")
                        .WithMany("Words")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("WordQuiz.Models.WordStatistic", b =>
                {
                    b.HasOne("WordQuiz.Models.Player", "Player")
                        .WithMany("WordStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WordQuiz.Models.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("WordQuiz.Models.Topic", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("WordQuiz.Models.Player", b =>
                {
                    b.Navigation("WordStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
